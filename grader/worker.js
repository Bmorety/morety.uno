// worker.js
export default {
    async fetch(request, env) {
        if (request.method === "OPTIONS") {
            return new Response(null, {
                headers: corsHeaders(env.ALLOW_ORIGIN || "*")
            });
        }
        if (request.method !== "POST") {
            return new Response("Method Not Allowed", { status: 405, headers: corsHeaders(env.ALLOW_ORIGIN || "*") });
        }

        const body = await request.json().catch(() => null);
        if (!body?.contact?.email) return json({ error: "Missing email" }, 400, env);

        // 1) Build prompt
        const prompt = buildPrompt(body);

        // 2) Call OpenAI (gpt-4o-mini is cheap + solid)
        const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${env.OPENAI_API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                model: "gpt-4o-mini",
                temperature: 0.3,
                response_format: { type: "json_object" },
                messages: [
                    { role: "system", content: SYSTEM_PROMPT },
                    { role: "user", content: prompt }
                ]
            })
        });

        if (!openaiRes.ok) return json({ error: "LLM error" }, 502, env);
        const { choices } = await openaiRes.json();
        const audit = JSON.parse(choices[0].message.content);

        // 3) Email via Resend
        const emailHtml = renderEmail(audit);
        const emailSend = await fetch("https://api.resend.com/emails", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${env.RESEND_API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                from: env.FROM_EMAIL, // e.g. "BMo · Brand Grader <grader@morety.uno>"
                to: [body.contact.email],
                bcc: env.BCC_EMAIL ? [env.BCC_EMAIL] : undefined,
                subject: `Your LinkedIn Brand Grade: ${audit.grade.letter} (${audit.grade.score}/100)`,
                html: emailHtml
            })
        });

        if (!emailSend.ok) return json({ error: "Email error" }, 502, env);

        return json({ ok: true }, 200, env);
    }
}

const SYSTEM_PROMPT = `
You are a strict but helpful LinkedIn personal branding auditor for mobility leaders.
Return clean JSON only. Be specific and actionable, in a friendly, concise tone.
Penalize vagueness, keyword stuffing, and zero POV. Reward clarity, proof, cadence.
`;

function buildPrompt(input) {
    return JSON.stringify({
        rubric: {
            clarity_positioning: 20,
            proof_credibility: 15,
            pov_originality: 15,
            consistency_craft: 10,
            activity_cadence: 15,
            searchability_keywords: 15,
            network_fit: 10
        },
        contact: input.contact,
        profile: input.profile,
        activity: input.activity,
        posts: input.posts
    });
}

function renderEmail(audit) {
    const li = s => `<li>${s}</li>`;
    return `
  <div style="font-family:Inter,system-ui,sans-serif;line-height:1.5;color:#0b0d0e">
    <h1 style="margin:0 0 6px">Your LinkedIn Brand Grade: ${audit.grade.letter} (${audit.grade.score}/100)</h1>
    <p style="margin:0 0 18px;color:#6b7280">${audit.summary}</p>

    <h3>Breakdown</h3>
    <ul>${audit.breakdown.map(b => li(`<strong>${b.category}:</strong> ${b.score}/10 – ${b.note}`)).join("")}</ul>

    <h3>Quick Wins (do today)</h3>
    <ol>${audit.quick_wins.map(w => li(w)).join("")}</ol>

    <h3>Priority Fixes (7–14 days)</h3>
    <ol>${audit.priority_fixes.map(w => li(w)).join("")}</ol>

    <h3>Suggested Headline</h3>
    <p>${audit.suggested.headline}</p>

    <h3>Banner Copy</h3>
    <p><strong>${audit.suggested.banner.headline}</strong><br>${audit.suggested.banner.subheadline}</p>

    <h3>About (rewritten)</h3>
    <p>${audit.suggested.about}</p>

    <h3>90-Day Plan</h3>
    <ul>${audit.plan_90d.map(li).join("")}</ul>

    <hr style="margin:20px 0;border:none;border-top:1px solid #e5e7eb" />
    <p style="font-size:12px;color:#9ca3af">Generated by morety.uno · No scraping · You control what you paste.</p>
  </div>
  `;
}

function json(data, status = 200, env) {
    return new Response(JSON.stringify(data), {
        status,
        headers: { "Content-Type": "application/json", ...corsHeaders(env.ALLOW_ORIGIN || "*") }
    });
}

function corsHeaders(origin) {
    return {
        "Access-Control-Allow-Origin": origin,
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization"
    }
}
